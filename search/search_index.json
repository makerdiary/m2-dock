{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"M.2 Dock An essential carrier board to quickly prototype your next embedded design with a removable M.2 module. \u00b6 Description \u00b6 The M.2 Dock is an essential carrier board to quickly prototype your next embedded design with a removable M.2 module. It features a fully-integrated DAPLink debugger with Power Profiling , enabling you to program, debug and perform real-time current profiling of your IoT applications without using external tools. This design extends the interfaces compared to the M.2 Module through an M.2 E-Key connector, including USB 2.0 ports, UART, SPI, TWI, PDM, I2S, PWM, ADC and GPIOs. The M.2 Dock also comes with 1.3\" 240x240 Color IPS TFT LCD, Li-Po Battery Charger, microSD Card Slot, Grove Connectors, LEDs and Buttons. Key Features \u00b6 Integrated DAPLink Debugger MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID/WEBUSB HID - CMSIS-DAP compliant debug channel Advanced Power Profiling Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python 1.3\" 240x240 Color IPS TFT LCD Display Li-Po Battery Charger with Power Path Management User programmable LED and Button microSD Card Slot 4 Grove Connectors Reversible USB-C Connectors Arduino Form Factor 3.3V IO Operationg Voltage Hardware Diagram \u00b6 The hardware diagram of the M.2 Dock is shown below: Supported Modules \u00b6 The following shows the M.2 module that can work with M.2 Dock. More modules are planned and will show up gradually over time. nRF52840 M.2 Module Tutorials \u00b6 We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Getting Started with M.2 Dock Getting Started with Power Profiling Debugging with pyOCD Debugging with Visual Studio Code Debugging with Eclipse Debugging with Keil MDK Debugging with IAR Workbench Upgrading the DAPLink Firmware We also offer the nRF52840 M.2 Developer Kit to help you prototype your application and then scale to production faster using the nRF52840 M.2 Module combined with your custom PCB hardware. nRF52840 M.2 Developer Kit Design Resource \u00b6 Title Version M.2 Dock Hardware Diagram V1.0 M.2 Dock Schematic for nRF52840 M.2 Module V1.0 M.2 Dock Board File V1.0 M.2 Dock 3D Model V1.0 Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Introduction"},{"location":"#m2-dockan-essential-carrier-board-to-quickly-prototype-your-next-embedded-design-with-a-removable-m2-module","text":"","title":"M.2 DockAn essential carrier board to quickly prototype your next embedded design with a removable M.2 module."},{"location":"#description","text":"The M.2 Dock is an essential carrier board to quickly prototype your next embedded design with a removable M.2 module. It features a fully-integrated DAPLink debugger with Power Profiling , enabling you to program, debug and perform real-time current profiling of your IoT applications without using external tools. This design extends the interfaces compared to the M.2 Module through an M.2 E-Key connector, including USB 2.0 ports, UART, SPI, TWI, PDM, I2S, PWM, ADC and GPIOs. The M.2 Dock also comes with 1.3\" 240x240 Color IPS TFT LCD, Li-Po Battery Charger, microSD Card Slot, Grove Connectors, LEDs and Buttons.","title":"Description"},{"location":"#key-features","text":"Integrated DAPLink Debugger MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID/WEBUSB HID - CMSIS-DAP compliant debug channel Advanced Power Profiling Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python 1.3\" 240x240 Color IPS TFT LCD Display Li-Po Battery Charger with Power Path Management User programmable LED and Button microSD Card Slot 4 Grove Connectors Reversible USB-C Connectors Arduino Form Factor 3.3V IO Operationg Voltage","title":"Key Features"},{"location":"#hardware-diagram","text":"The hardware diagram of the M.2 Dock is shown below:","title":"Hardware Diagram"},{"location":"#supported-modules","text":"The following shows the M.2 module that can work with M.2 Dock. More modules are planned and will show up gradually over time. nRF52840 M.2 Module","title":"Supported Modules"},{"location":"#tutorials","text":"We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Getting Started with M.2 Dock Getting Started with Power Profiling Debugging with pyOCD Debugging with Visual Studio Code Debugging with Eclipse Debugging with Keil MDK Debugging with IAR Workbench Upgrading the DAPLink Firmware We also offer the nRF52840 M.2 Developer Kit to help you prototype your application and then scale to production faster using the nRF52840 M.2 Module combined with your custom PCB hardware. nRF52840 M.2 Developer Kit","title":"Tutorials"},{"location":"#design-resource","text":"Title Version M.2 Dock Hardware Diagram V1.0 M.2 Dock Schematic for nRF52840 M.2 Module V1.0 M.2 Dock Board File V1.0 M.2 Dock 3D Model V1.0","title":"Design Resource"},{"location":"#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Interested in contributing to M.2 Dock ? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us on makerdiary/community . Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Request a Tutorial \u00b6 If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Interested in contributing to M.2 Dock ? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on makerdiary/community .","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#request-a-tutorial","text":"If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Request a Tutorial"},{"location":"LICENSE/","text":"MIT License Copyright \u00a9 2020 makerdiary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"getting-started/","text":"Getting Started with M.2 Dock \u00b6 Introduction \u00b6 This guide is intended to assist users in the initial setup and demonstration of the basic usage with M.2 Dock: Logging via Serial port Drag-n-Drop Programming Using pyOCD Command Tool What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer Assemble the hardware \u00b6 Make sure the M.2 Dock is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Angle of Insertion Angled insertion is allowable and preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0 , typically 20\u00b0 . Secure the module using the provided mounting screw as shown in the figure below: Connect the board \u00b6 Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer. Logging via Serial port \u00b6 M.2 Dock enables developers with a Virtual COM Port which you can use for logging and reporting application state. There are many Terminal applications available for your host PC. They provide a window where your target can print messages. Select the tool according to your host: screen (for macOS/Linux) PuTTY (for Windows) CoolTerm (for macOS/Linux/Windows) Drag-n-Drop Programming \u00b6 Drag-n-Drop is an optional intuitive programming feature. It allows programming of your target MCU in a very simple way: dragging and dropping a file ( .hex -format) onto the M2-DOCK drive. There is no need to install application software. Anyone that can drag and drop a file to a USB memory stick can now program the target module. Tip Upon completion, the drive remounts. If a failure occurs, the file FAIL.TXT appears on the drive containing information about the failure. Using pyOCD Command Tool \u00b6 pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using the DAPLink debugger. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of pyOCD can be installed via pip as follows. Skip the installation if pyOCD already exists. pip install -U pyocd List information about the debugger connected to your computer by running: pyocd list The output should be similar as below: # Probe Unique ID -------------------------------------------------------------------------------- 0 ARM DAPLink CMSIS-DAP 10283602185129a100000000000000000000000097969902 The following commands demonstrate how to flash/erase the nRF52840 M.2 Module: To erase the whole flash of the nRF52840 target: pyocd erase -t nrf52840 --chip To flash the nRF52840 target with .hex -format firmware: pyocd flash -t nrf52840 Sample.hex To flash the nRF52840 target with a plain binary: pyocd flash -t nrf52840 --base-address 0x1000 Sample.bin The --base-address option is used for setting the address where to flash a binary. Defaults to start of flash. Tip Run pyocd --hlep to get the available commands and additional help. Explore Further \u00b6 Now that you are familiar with the M.2 Dock, it's time to explore more tutorials available below: Getting Started with Power Profiling Debugging with pyOCD Debugging with Visual Studio Code Debugging with Eclipse Debugging with Keil MDK Debugging with IAR Workbench Upgrading the DAPLink Firmware We also offer the nRF52840 M.2 Developer Kit to help you prototype your application and then scale to production faster using the nRF52840 M.2 Module combined with your custom PCB hardware. nRF52840 M.2 Developer Kit Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Getting Started"},{"location":"getting-started/#getting-started-with-m2-dock","text":"","title":"Getting Started with M.2 Dock"},{"location":"getting-started/#introduction","text":"This guide is intended to assist users in the initial setup and demonstration of the basic usage with M.2 Dock: Logging via Serial port Drag-n-Drop Programming Using pyOCD Command Tool","title":"Introduction"},{"location":"getting-started/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer","title":"What you'll need"},{"location":"getting-started/#assemble-the-hardware","text":"Make sure the M.2 Dock is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Angle of Insertion Angled insertion is allowable and preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0 , typically 20\u00b0 . Secure the module using the provided mounting screw as shown in the figure below:","title":"Assemble the hardware"},{"location":"getting-started/#connect-the-board","text":"Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer.","title":"Connect the board"},{"location":"getting-started/#logging-via-serial-port","text":"M.2 Dock enables developers with a Virtual COM Port which you can use for logging and reporting application state. There are many Terminal applications available for your host PC. They provide a window where your target can print messages. Select the tool according to your host: screen (for macOS/Linux) PuTTY (for Windows) CoolTerm (for macOS/Linux/Windows)","title":"Logging via Serial port"},{"location":"getting-started/#drag-n-drop-programming","text":"Drag-n-Drop is an optional intuitive programming feature. It allows programming of your target MCU in a very simple way: dragging and dropping a file ( .hex -format) onto the M2-DOCK drive. There is no need to install application software. Anyone that can drag and drop a file to a USB memory stick can now program the target module. Tip Upon completion, the drive remounts. If a failure occurs, the file FAIL.TXT appears on the drive containing information about the failure.","title":"Drag-n-Drop Programming"},{"location":"getting-started/#using-pyocd-command-tool","text":"pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using the DAPLink debugger. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of pyOCD can be installed via pip as follows. Skip the installation if pyOCD already exists. pip install -U pyocd List information about the debugger connected to your computer by running: pyocd list The output should be similar as below: # Probe Unique ID -------------------------------------------------------------------------------- 0 ARM DAPLink CMSIS-DAP 10283602185129a100000000000000000000000097969902 The following commands demonstrate how to flash/erase the nRF52840 M.2 Module: To erase the whole flash of the nRF52840 target: pyocd erase -t nrf52840 --chip To flash the nRF52840 target with .hex -format firmware: pyocd flash -t nrf52840 Sample.hex To flash the nRF52840 target with a plain binary: pyocd flash -t nrf52840 --base-address 0x1000 Sample.bin The --base-address option is used for setting the address where to flash a binary. Defaults to start of flash. Tip Run pyocd --hlep to get the available commands and additional help.","title":"Using pyOCD Command Tool"},{"location":"getting-started/#explore-further","text":"Now that you are familiar with the M.2 Dock, it's time to explore more tutorials available below: Getting Started with Power Profiling Debugging with pyOCD Debugging with Visual Studio Code Debugging with Eclipse Debugging with Keil MDK Debugging with IAR Workbench Upgrading the DAPLink Firmware We also offer the nRF52840 M.2 Developer Kit to help you prototype your application and then scale to production faster using the nRF52840 M.2 Module combined with your custom PCB hardware. nRF52840 M.2 Developer Kit","title":"Explore Further"},{"location":"getting-started/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"power-profiling/","text":"Getting Started with Power Profiling \u00b6 Description \u00b6 The M.2 Dock features an Advanced Power Profiler, enabling you to perform real-time current profiling of your applications without using external tools. Key features Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python This section details how to perform real-time current profiling of your applications. What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer How it works \u00b6 The Advanced Power Profiler utilizes a current sense amplifier together with a dual gain stage to measure the voltage drop over a small series resistor (0.056\u03a9). The output voltage is measured by an ADC channel. The Advanced Power Profiler is capable of measuring currents up to 690 mA. When measuring currents below 11 mA, the accuracy is 50 \u00b5A. For currents above 11 mA, the accuracy is 5 mA. In addition, the voltage of the module (VDD_M2) is measured by another ADC channel through a 1:2 voltage divider. After the conversion is completed, the samples are exported to the Power Profiler utility over USB CDC ACM. It can produce 30000 samples per second (2 bytes per sample). The figure below shows how the Advanced Power Profiler works: Installing the Power Profiler \u00b6 Power Profiler is an open source Python utility for real-time power profiling of your applications running on the nRF52840 M.2 Developer Kit. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of Power Profiler can be installed via pip as follows. pip3 install power-profiler Using the Power Profiler \u00b6 The steps below demonstrate how to use the Power Profiler utility to perform real-time current profiling of a simple application: Assemble the M.2 Module, then connect the Debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Program the board with your application firmware. Will use the Blinky example here to keep it simple. Start the Power Profiler in your terminal by running: power-profiler The Power Profiler window will appear. Observe the current curve: You can try more example applications and measure their real-time power consumption. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Power Profiling"},{"location":"power-profiling/#getting-started-with-power-profiling","text":"","title":"Getting Started with Power Profiling"},{"location":"power-profiling/#description","text":"The M.2 Dock features an Advanced Power Profiler, enabling you to perform real-time current profiling of your applications without using external tools. Key features Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python This section details how to perform real-time current profiling of your applications.","title":"Description"},{"location":"power-profiling/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer","title":"What you'll need"},{"location":"power-profiling/#how-it-works","text":"The Advanced Power Profiler utilizes a current sense amplifier together with a dual gain stage to measure the voltage drop over a small series resistor (0.056\u03a9). The output voltage is measured by an ADC channel. The Advanced Power Profiler is capable of measuring currents up to 690 mA. When measuring currents below 11 mA, the accuracy is 50 \u00b5A. For currents above 11 mA, the accuracy is 5 mA. In addition, the voltage of the module (VDD_M2) is measured by another ADC channel through a 1:2 voltage divider. After the conversion is completed, the samples are exported to the Power Profiler utility over USB CDC ACM. It can produce 30000 samples per second (2 bytes per sample). The figure below shows how the Advanced Power Profiler works:","title":"How it works"},{"location":"power-profiling/#installing-the-power-profiler","text":"Power Profiler is an open source Python utility for real-time power profiling of your applications running on the nRF52840 M.2 Developer Kit. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of Power Profiler can be installed via pip as follows. pip3 install power-profiler","title":"Installing the Power Profiler"},{"location":"power-profiling/#using-the-power-profiler","text":"The steps below demonstrate how to use the Power Profiler utility to perform real-time current profiling of a simple application: Assemble the M.2 Module, then connect the Debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Program the board with your application firmware. Will use the Blinky example here to keep it simple. Start the Power Profiler in your terminal by running: power-profiler The Power Profiler window will appear. Observe the current curve: You can try more example applications and measure their real-time power consumption.","title":"Using the Power Profiler"},{"location":"power-profiling/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"resources/","text":"Resources \u00b6 See below for available documentation, software, and other resources. Documentation and guides \u00b6 Getting Started with M.2 Dock Getting Started with Power Profiling Debugging with pyOCD Debugging with Visual Studio Code Debugging with Eclipse Debugging with Keil MDK Debugging with IAR Workbench Upgrading the DAPLink Firmware nRF52840 M.2 Developer Kit Documentation nRF52840 M.2 Module Documentation Hardware Resource \u00b6 Title Version M.2 Dock Hardware Diagram V1.0 M.2 Dock Schematic for nRF52840 M.2 Module V1.0 M.2 Dock Board File V1.0 M.2 Dock 3D Model V1.0 Request a Tutorial \u00b6 If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Resources"},{"location":"resources/#resources","text":"See below for available documentation, software, and other resources.","title":"Resources"},{"location":"resources/#documentation-and-guides","text":"Getting Started with M.2 Dock Getting Started with Power Profiling Debugging with pyOCD Debugging with Visual Studio Code Debugging with Eclipse Debugging with Keil MDK Debugging with IAR Workbench Upgrading the DAPLink Firmware nRF52840 M.2 Developer Kit Documentation nRF52840 M.2 Module Documentation","title":"Documentation and guides"},{"location":"resources/#hardware-resource","text":"Title Version M.2 Dock Hardware Diagram V1.0 M.2 Dock Schematic for nRF52840 M.2 Module V1.0 M.2 Dock Board File V1.0 M.2 Dock 3D Model V1.0","title":"Hardware Resource"},{"location":"resources/#request-a-tutorial","text":"If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Request a Tutorial"},{"location":"upgrading/","text":"Upgrading the DAPLink Firmware \u00b6 Introduction \u00b6 M.2 Dock can be easily upgraded via the on-chip bootloader software over USB. An update ensures you have the most recent features and improvements for your current version of DAPLink firmware. This section describes how to upgrade to the latest DAPLink firmware. What you'll need \u00b6 M.2 Dock macOS, Linux, or Windows 7 or newer 1x USB-C Cable Prepare the firmware \u00b6 The current release DAPLink firmware is hosted on GitHub Release Site with the name m2_dock_<target>_<version>.bin . DAPLink Firmware Update the firmware \u00b6 To update the firmware, follow these steps: Enter DFU mode by pressing DFU/RST button during connecting to the Debugger USB port . The board should mount as a disk drive called CRP DISABLD . Open CRP DISABLD , and remove the file called firmware.bin . Copy the new firmware ( .bin -format file prepared above) onto CRP DISABLD : On Windows, replace firmware.bin with the new firmware. On Linux/macOS, use dd command: dd if ={ new_firmware.bin } of ={ firmware.bin } conv = notrunc Unplug your M.2 Dock, and plug it back in. It should now appear as a disk drive called M.2 Dock . Verify the update \u00b6 Check the DETAILS.TXT file in M.2 Dock drive to verify the Interface Version . Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Upgrading DAPLink"},{"location":"upgrading/#upgrading-the-daplink-firmware","text":"","title":"Upgrading the DAPLink Firmware"},{"location":"upgrading/#introduction","text":"M.2 Dock can be easily upgraded via the on-chip bootloader software over USB. An update ensures you have the most recent features and improvements for your current version of DAPLink firmware. This section describes how to upgrade to the latest DAPLink firmware.","title":"Introduction"},{"location":"upgrading/#what-youll-need","text":"M.2 Dock macOS, Linux, or Windows 7 or newer 1x USB-C Cable","title":"What you'll need"},{"location":"upgrading/#prepare-the-firmware","text":"The current release DAPLink firmware is hosted on GitHub Release Site with the name m2_dock_<target>_<version>.bin . DAPLink Firmware","title":"Prepare the firmware"},{"location":"upgrading/#update-the-firmware","text":"To update the firmware, follow these steps: Enter DFU mode by pressing DFU/RST button during connecting to the Debugger USB port . The board should mount as a disk drive called CRP DISABLD . Open CRP DISABLD , and remove the file called firmware.bin . Copy the new firmware ( .bin -format file prepared above) onto CRP DISABLD : On Windows, replace firmware.bin with the new firmware. On Linux/macOS, use dd command: dd if ={ new_firmware.bin } of ={ firmware.bin } conv = notrunc Unplug your M.2 Dock, and plug it back in. It should now appear as a disk drive called M.2 Dock .","title":"Update the firmware"},{"location":"upgrading/#verify-the-update","text":"Check the DETAILS.TXT file in M.2 Dock drive to verify the Interface Version .","title":"Verify the update"},{"location":"upgrading/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"where-to-buy/","text":"Where to Buy nRF52840 M.2 Developer Kit \u00b6 Buy Online \u00b6 nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) is available on the following channels (click to go directly to the product): Bulk & Customization \u00b6 We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, feel free to contact us and we'll reply before you know it: contact@makerdiary.com Contact Us","title":"Where to Buy"},{"location":"where-to-buy/#where-to-buy-nrf52840-m2-developer-kit","text":"","title":"Where to Buy nRF52840 M.2 Developer Kit"},{"location":"where-to-buy/#buy-online","text":"nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) is available on the following channels (click to go directly to the product):","title":"Buy Online"},{"location":"where-to-buy/#bulk-customization","text":"We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, feel free to contact us and we'll reply before you know it: contact@makerdiary.com Contact Us","title":"Bulk &amp; Customization"},{"location":"debugging/eclipse/","text":"Debugging with GNU MCU Eclipse \u00b6 Introduction \u00b6 GNU MCU Eclipse fully supports pyOCD with an included pyOCD debugging plugin. This guide explains how to configure the local debug toolchain using M.2 Dock with GNU MCU Eclipse. What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer Installing Eclipse \u00b6 You need to install Eclipse CDT with the GNU MCU Eclipse plugins to begin: Install Eclipse IDE for C/C++ Developers . Open Eclipse. Create a workspace directory. This will be separate from your code. Install the GNU MCU Eclipse plugin: Click the Help menu item and select Eclipse Marketplace\u2026 Find GNU MCU Eclipse and install. Select GNU MCU Eclipse x.x.x and confirm. Install pyOCD \u00b6 The latest stable version of pyOCD may be installed via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Install GNU Arm Embedded Toolchain \u00b6 Download and install the GNU ARM Embedded Toolchain . Skip this step if the toolchain already exists. Importing the project in Eclipse \u00b6 Open Eclipse. On the Welcome window , select Import a project with a working Makefile . Select the folder to your project with a Makefile. E.g., blinky/armgcc . Under Toolchain for Indexer Settings , select Cross ARM GCC . Click Finish . Configuring the debugger \u00b6 Select Run > Debug Configurations... . If no configuration exists under GDB pyOCD Debugging , click on New launch configuration . In the Main tab, select the .out file ( _build/nrf52840_xxaa.out ) under C/C++ Application . In the Debugger tab: Under pyOCD Setup , set the Executable path and make sure that it is pointing to your latest version of the pyocd-gdbserver . Under GDB Client Setup , set the Executable path to your arm-none-eabi-gdb . Click Apply . Tip The which (on macOS/Linux) or where (on Windows) shell command can be used to find the location of pyocd-gdbserver and arm-none-eabi-gdb . E.g., which pyocd-gdbserver and which arm-none-eabi-gdb . Connecting the target \u00b6 Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer. Debugging your project \u00b6 Click the menu Run -> Debug , and debugging starts. Click on the Debugger Console tab to see the debug output: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Debugging with Eclipse"},{"location":"debugging/eclipse/#debugging-with-gnu-mcu-eclipse","text":"","title":"Debugging with GNU MCU Eclipse"},{"location":"debugging/eclipse/#introduction","text":"GNU MCU Eclipse fully supports pyOCD with an included pyOCD debugging plugin. This guide explains how to configure the local debug toolchain using M.2 Dock with GNU MCU Eclipse.","title":"Introduction"},{"location":"debugging/eclipse/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer","title":"What you'll need"},{"location":"debugging/eclipse/#installing-eclipse","text":"You need to install Eclipse CDT with the GNU MCU Eclipse plugins to begin: Install Eclipse IDE for C/C++ Developers . Open Eclipse. Create a workspace directory. This will be separate from your code. Install the GNU MCU Eclipse plugin: Click the Help menu item and select Eclipse Marketplace\u2026 Find GNU MCU Eclipse and install. Select GNU MCU Eclipse x.x.x and confirm.","title":"Installing Eclipse"},{"location":"debugging/eclipse/#install-pyocd","text":"The latest stable version of pyOCD may be installed via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd","title":"Install pyOCD"},{"location":"debugging/eclipse/#install-gnu-arm-embedded-toolchain","text":"Download and install the GNU ARM Embedded Toolchain . Skip this step if the toolchain already exists.","title":"Install GNU Arm Embedded Toolchain"},{"location":"debugging/eclipse/#importing-the-project-in-eclipse","text":"Open Eclipse. On the Welcome window , select Import a project with a working Makefile . Select the folder to your project with a Makefile. E.g., blinky/armgcc . Under Toolchain for Indexer Settings , select Cross ARM GCC . Click Finish .","title":"Importing the project in Eclipse"},{"location":"debugging/eclipse/#configuring-the-debugger","text":"Select Run > Debug Configurations... . If no configuration exists under GDB pyOCD Debugging , click on New launch configuration . In the Main tab, select the .out file ( _build/nrf52840_xxaa.out ) under C/C++ Application . In the Debugger tab: Under pyOCD Setup , set the Executable path and make sure that it is pointing to your latest version of the pyocd-gdbserver . Under GDB Client Setup , set the Executable path to your arm-none-eabi-gdb . Click Apply . Tip The which (on macOS/Linux) or where (on Windows) shell command can be used to find the location of pyocd-gdbserver and arm-none-eabi-gdb . E.g., which pyocd-gdbserver and which arm-none-eabi-gdb .","title":"Configuring the debugger"},{"location":"debugging/eclipse/#connecting-the-target","text":"Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer.","title":"Connecting the target"},{"location":"debugging/eclipse/#debugging-your-project","text":"Click the menu Run -> Debug , and debugging starts. Click on the Debugger Console tab to see the debug output:","title":"Debugging your project"},{"location":"debugging/eclipse/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"debugging/iar-ewarm/","text":"Debugging with IAR Embedded Workbench \u00b6 Introduction \u00b6 IAR's EWARM is a completely integrated development environment that supports CMSIS-DAP out-of-the-box. This guide explains how to configure the local debug toolchain using M.2 Dock with IAR's EWARM. What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) IAR Embedded Workbench for ARM Connecting the target \u00b6 Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer. Configuring the debugger \u00b6 Open your IAR project. Click Options from the Project menu. In the option window, select Debugger from the menu on the left. In the Setup tab, select CMSIS DAP from the Driver drop-down menu. In the Download tab, check Verify download and Use flash loader(s) . Make sure that the correct .board file is used. Select CMSIS DAP from the menu on the left, select the Interface tab and configure the SWD protocol. Click OK to save the options. Debugging your project \u00b6 Insert a Breakpoint in your code. Click the menu Project -> Download and Debug , and debugging starts. Now you can explore IAR's debugging capabilities. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Debugging with IAR Workbench"},{"location":"debugging/iar-ewarm/#debugging-with-iar-embedded-workbench","text":"","title":"Debugging with IAR Embedded Workbench"},{"location":"debugging/iar-ewarm/#introduction","text":"IAR's EWARM is a completely integrated development environment that supports CMSIS-DAP out-of-the-box. This guide explains how to configure the local debug toolchain using M.2 Dock with IAR's EWARM.","title":"Introduction"},{"location":"debugging/iar-ewarm/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) IAR Embedded Workbench for ARM","title":"What you'll need"},{"location":"debugging/iar-ewarm/#connecting-the-target","text":"Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer.","title":"Connecting the target"},{"location":"debugging/iar-ewarm/#configuring-the-debugger","text":"Open your IAR project. Click Options from the Project menu. In the option window, select Debugger from the menu on the left. In the Setup tab, select CMSIS DAP from the Driver drop-down menu. In the Download tab, check Verify download and Use flash loader(s) . Make sure that the correct .board file is used. Select CMSIS DAP from the menu on the left, select the Interface tab and configure the SWD protocol. Click OK to save the options.","title":"Configuring the debugger"},{"location":"debugging/iar-ewarm/#debugging-your-project","text":"Insert a Breakpoint in your code. Click the menu Project -> Download and Debug , and debugging starts. Now you can explore IAR's debugging capabilities.","title":"Debugging your project"},{"location":"debugging/iar-ewarm/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"debugging/keil-mdk/","text":"Debugging with Arm Keil MDK \u00b6 Introduction \u00b6 Arm Keil MDK is the complete software development environment for a wide range of Arm Cortex-M based microcontroller devices. MDK includes the \u00b5Vision IDE and debugger, Arm C/C++ compiler, and essential middleware components. It supports all silicon vendors with more than 6,000 devices and is easy to learn and use. This guide explains how to configure the local debug toolchain using M.2 Dock with Arm Keil MDK. Note Due to the linker limits, this does not work in the free version of uVision. If you do not have a uVision license, you can use Eclipse or Visual Studio Code instead. What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) ARM Keil MDK Connecting the target \u00b6 Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer. Configuring the debugger \u00b6 Open your Keil MDK project. Go to Project -> Options for Target -> Debug , and select CMSIS-DAP Debugger from the drop-down menu. Click Settings button. In the next windows select the DAPLink CMSIS-DAP adapter. Set the SW mode. In the SW Device , you can view the target device. Click OK to save the options. Debugging your project \u00b6 Insert a Breakpoint in your code. Click the menu Debug -> Start/Stop Debug Session , and debugging starts. Now you can explore the debugging capabilities for Variables, Registers and more. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Debugging with Arm Keil MDK"},{"location":"debugging/keil-mdk/#debugging-with-arm-keil-mdk","text":"","title":"Debugging with Arm Keil MDK"},{"location":"debugging/keil-mdk/#introduction","text":"Arm Keil MDK is the complete software development environment for a wide range of Arm Cortex-M based microcontroller devices. MDK includes the \u00b5Vision IDE and debugger, Arm C/C++ compiler, and essential middleware components. It supports all silicon vendors with more than 6,000 devices and is easy to learn and use. This guide explains how to configure the local debug toolchain using M.2 Dock with Arm Keil MDK. Note Due to the linker limits, this does not work in the free version of uVision. If you do not have a uVision license, you can use Eclipse or Visual Studio Code instead.","title":"Introduction"},{"location":"debugging/keil-mdk/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) ARM Keil MDK","title":"What you'll need"},{"location":"debugging/keil-mdk/#connecting-the-target","text":"Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer.","title":"Connecting the target"},{"location":"debugging/keil-mdk/#configuring-the-debugger","text":"Open your Keil MDK project. Go to Project -> Options for Target -> Debug , and select CMSIS-DAP Debugger from the drop-down menu. Click Settings button. In the next windows select the DAPLink CMSIS-DAP adapter. Set the SW mode. In the SW Device , you can view the target device. Click OK to save the options.","title":"Configuring the debugger"},{"location":"debugging/keil-mdk/#debugging-your-project","text":"Insert a Breakpoint in your code. Click the menu Debug -> Start/Stop Debug Session , and debugging starts. Now you can explore the debugging capabilities for Variables, Registers and more.","title":"Debugging your project"},{"location":"debugging/keil-mdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"debugging/pyocd/","text":"Debugging with pyOCD \u00b6 Overview \u00b6 pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. It is fully cross-platform, with support for Linux, macOS, and Windows. A command line tool is provided that covers most use cases, or you can make use of the Python API to enable low-level target control. A common use for the Python API is to run and control CI tests. Upwards of 70 popular MCUs are supported built-in. In addition, through the use of CMSIS-Packs, nearly every Cortex-M device on the market is supported. This guide demonstrates the basic usage of pyOCD with M.2 Dock. For more detailed information, refer to the pyOCD GitHub repository . What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer Installing \u00b6 The latest stable version of pyOCD may be installed via pip as follows: pip install -U pyocd Alternatively, to install the latest prerelease version from the HEAD of the master branch, you can do the following: pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip Basic Usage \u00b6 The pyocd command line tool gives you total control over your target with these subcommands: gdbserver : GDB remote server allows you to debug using gdb via either GNU MCU Eclipse plug-in or the console. flash : Program files of various formats into flash memory. erase : Erase part or all of an MCU's flash memory. pack : Manage CMSIS Device Family Packs that provide additional target device support. commander : Interactive REPL control and inspection of the MCU. list : Show connected devices. Target support \u00b6 When pyOCD connects to a target, it needs to know what type of target it is controlling. To see the available target types you can run: pyocd list --targets Debugging \u00b6 pyOCD contains a GDB remote server which allows you to debug using gdb. You can get additional help by running: pyocd gdbserver --help . You will be able to execute the following in order to start a GDB server: pyocd gdbserver -t nrf52840 In the second terminal window, connect to the GDB server and load firmware by running: $ arm-none-eabi-gdb application.elf <gdb> target remote localhost:3333 <gdb> load <gdb> monitor reset The GDB server also works well with Eclipse and the GNU MCU Eclipse plug-ins . GNU MCU Eclipse fully supports pyOCD with an included pyOCD debugging plugin. For instructions on GNU MCU Eclipse for pyOCD, please refer to: Debugging with Eclipse Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Debugging with pyOCD"},{"location":"debugging/pyocd/#debugging-with-pyocd","text":"","title":"Debugging with pyOCD"},{"location":"debugging/pyocd/#overview","text":"pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. It is fully cross-platform, with support for Linux, macOS, and Windows. A command line tool is provided that covers most use cases, or you can make use of the Python API to enable low-level target control. A common use for the Python API is to run and control CI tests. Upwards of 70 popular MCUs are supported built-in. In addition, through the use of CMSIS-Packs, nearly every Cortex-M device on the market is supported. This guide demonstrates the basic usage of pyOCD with M.2 Dock. For more detailed information, refer to the pyOCD GitHub repository .","title":"Overview"},{"location":"debugging/pyocd/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer","title":"What you'll need"},{"location":"debugging/pyocd/#installing","text":"The latest stable version of pyOCD may be installed via pip as follows: pip install -U pyocd Alternatively, to install the latest prerelease version from the HEAD of the master branch, you can do the following: pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip","title":"Installing"},{"location":"debugging/pyocd/#basic-usage","text":"The pyocd command line tool gives you total control over your target with these subcommands: gdbserver : GDB remote server allows you to debug using gdb via either GNU MCU Eclipse plug-in or the console. flash : Program files of various formats into flash memory. erase : Erase part or all of an MCU's flash memory. pack : Manage CMSIS Device Family Packs that provide additional target device support. commander : Interactive REPL control and inspection of the MCU. list : Show connected devices.","title":"Basic Usage"},{"location":"debugging/pyocd/#target-support","text":"When pyOCD connects to a target, it needs to know what type of target it is controlling. To see the available target types you can run: pyocd list --targets","title":"Target support"},{"location":"debugging/pyocd/#debugging","text":"pyOCD contains a GDB remote server which allows you to debug using gdb. You can get additional help by running: pyocd gdbserver --help . You will be able to execute the following in order to start a GDB server: pyocd gdbserver -t nrf52840 In the second terminal window, connect to the GDB server and load firmware by running: $ arm-none-eabi-gdb application.elf <gdb> target remote localhost:3333 <gdb> load <gdb> monitor reset The GDB server also works well with Eclipse and the GNU MCU Eclipse plug-ins . GNU MCU Eclipse fully supports pyOCD with an included pyOCD debugging plugin. For instructions on GNU MCU Eclipse for pyOCD, please refer to: Debugging with Eclipse","title":"Debugging"},{"location":"debugging/pyocd/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"debugging/vscode/","text":"Debugging with Visual Studio Code \u00b6 Introduction \u00b6 This guide explains how to configure the local debug toolchain using M.2 Dock with Visual Studio Code. What you'll need \u00b6 A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer Install Visual Studio Code \u00b6 You need to install Visual Studio Code with the C/C++ extensions to begin. Install Visual Studio Code . Open Visual Studio Code, and click on the Extensions button. Search for the C/C++ plugin (by Microsoft) and click Install . When prompted, restart the IDE. Install pyOCD \u00b6 The latest stable version of pyOCD may be installed via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Install GNU Arm Embedded Toolchain \u00b6 Download and install the GNU ARM Embedded Toolchain . Then ensure the path is added to your OS PATH environment variable, for example on macOS: echo 'export PATH=\"<path to install directory>/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if arm-none-eabi-gcc works: arm-none-eabi-gcc --version Configuring the debugger \u00b6 The launch.json file is used to configure the debugger in Visual Studio Code. Perform the following steps to configure the debugger for your project: Open the project folder in Visual Studio Code. Open the .vscode/launch.json file and add the example configurations: { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"C++ Launch\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceRoot}/armgcc/_build/nrf52840_xxaa.out\" , \"args\" : [], \"stopAtEntry\" : true , \"cwd\" : \"${workspaceRoot}\" , \"environment\" : [], \"externalConsole\" : false , \"debugServerArgs\" : \"\" , \"serverLaunchTimeout\" : 20000 , \"filterStderr\" : true , \"filterStdout\" : false , \"serverStarted\" : \"GDB\\\\ server\\\\ started\" , \"preLaunchTask\" : \"make\" , \"setupCommands\" : [ { \"text\" : \"-target-select remote localhost:3333\" , \"description\" : \"connect to target\" , \"ignoreFailures\" : false }, { \"text\" : \"-file-exec-and-symbols ${workspaceRoot}/armgcc/_build/nrf52840_xxaa.out\" , \"description\" : \"load file\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor endian little\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor reset\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor halt\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor arm semihosting enable\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-target-download\" , \"description\" : \"flash target\" , \"ignoreFailures\" : false } ], \"logging\" : { \"moduleLoad\" : true , \"trace\" : true , \"engineLogging\" : true , \"programOutput\" : true , \"exceptions\" : true }, \"linux\" : { \"MIMode\" : \"gdb\" , \"MIDebuggerPath\" : \"arm-none-eabi-gdb\" , \"debugServerPath\" : \"pyocd-gdbserver\" }, \"osx\" : { \"MIMode\" : \"gdb\" , \"MIDebuggerPath\" : \"arm-none-eabi-gdb\" , \"debugServerPath\" : \"pyocd-gdbserver\" }, \"windows\" : { \"preLaunchTask\" : \"make.exe\" , \"MIMode\" : \"gdb\" , \"MIDebuggerPath\" : \"arm-none-eabi-gdb.exe\" , \"debugServerPath\" : \"pyocd-gdbserver.exe\" , \"setupCommands\" : [ { \"text\" : \"-environment-cd ${workspaceRoot}\\\\armgcc\\\\_build\" }, { \"text\" : \"-target-select remote localhost:3333\" , \"description\" : \"connect to target\" , \"ignoreFailures\" : false }, { \"text\" : \"-file-exec-and-symbols nrf52840_xxaa.out\" , \"description\" : \"load file\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor endian little\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor reset\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor halt\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor arm semihosting enable\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-target-download\" , \"description\" : \"flash target\" , \"ignoreFailures\" : false } ] } } ] } Create a make task in .vscode/tasks.json file: { // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"make\" , \"options\" : { \"cwd\" : \"${workspaceRoot}/armgcc\" }, \"problemMatcher\" : { \"owner\" : \"cpp\" , \"fileLocation\" : [ \"relative\" , \"${workspaceRoot}\" ], \"pattern\" : { \"regexp\" : \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\" , \"file\" : 1 , \"line\" : 2 , \"column\" : 3 , \"severity\" : 4 , \"message\" : 5 } }, \"args\" : [], \"linux\" : { \"command\" : \"make\" }, \"osx\" : { \"command\" : \"make\" }, \"windows\" : { \"command\" : \"make.exe\" } } ] } Connecting the target \u00b6 Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer. Debugging your project \u00b6 Click the menu Debug -> Start Debugging , and debugging starts. Click on the DEBUG CONSOLE tab to see the debug output: Now you can explore the debugging capabilities for Variables, Breakpoints and more. Reference \u00b6 VS Code Launch Json Reference VS Code Tasks Documentation Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Debugging with VS Code"},{"location":"debugging/vscode/#debugging-with-visual-studio-code","text":"","title":"Debugging with Visual Studio Code"},{"location":"debugging/vscode/#introduction","text":"This guide explains how to configure the local debug toolchain using M.2 Dock with Visual Studio Code.","title":"Introduction"},{"location":"debugging/vscode/#what-youll-need","text":"A nRF52840 M.2 Developer Kit (including nRF52840 M.2 Module and M.2 Dock) A macOS, Linux or Windows computer","title":"What you'll need"},{"location":"debugging/vscode/#install-visual-studio-code","text":"You need to install Visual Studio Code with the C/C++ extensions to begin. Install Visual Studio Code . Open Visual Studio Code, and click on the Extensions button. Search for the C/C++ plugin (by Microsoft) and click Install . When prompted, restart the IDE.","title":"Install Visual Studio Code"},{"location":"debugging/vscode/#install-pyocd","text":"The latest stable version of pyOCD may be installed via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd","title":"Install pyOCD"},{"location":"debugging/vscode/#install-gnu-arm-embedded-toolchain","text":"Download and install the GNU ARM Embedded Toolchain . Then ensure the path is added to your OS PATH environment variable, for example on macOS: echo 'export PATH=\"<path to install directory>/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if arm-none-eabi-gcc works: arm-none-eabi-gcc --version","title":"Install GNU Arm Embedded Toolchain"},{"location":"debugging/vscode/#configuring-the-debugger","text":"The launch.json file is used to configure the debugger in Visual Studio Code. Perform the following steps to configure the debugger for your project: Open the project folder in Visual Studio Code. Open the .vscode/launch.json file and add the example configurations: { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"C++ Launch\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceRoot}/armgcc/_build/nrf52840_xxaa.out\" , \"args\" : [], \"stopAtEntry\" : true , \"cwd\" : \"${workspaceRoot}\" , \"environment\" : [], \"externalConsole\" : false , \"debugServerArgs\" : \"\" , \"serverLaunchTimeout\" : 20000 , \"filterStderr\" : true , \"filterStdout\" : false , \"serverStarted\" : \"GDB\\\\ server\\\\ started\" , \"preLaunchTask\" : \"make\" , \"setupCommands\" : [ { \"text\" : \"-target-select remote localhost:3333\" , \"description\" : \"connect to target\" , \"ignoreFailures\" : false }, { \"text\" : \"-file-exec-and-symbols ${workspaceRoot}/armgcc/_build/nrf52840_xxaa.out\" , \"description\" : \"load file\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor endian little\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor reset\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor halt\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor arm semihosting enable\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-target-download\" , \"description\" : \"flash target\" , \"ignoreFailures\" : false } ], \"logging\" : { \"moduleLoad\" : true , \"trace\" : true , \"engineLogging\" : true , \"programOutput\" : true , \"exceptions\" : true }, \"linux\" : { \"MIMode\" : \"gdb\" , \"MIDebuggerPath\" : \"arm-none-eabi-gdb\" , \"debugServerPath\" : \"pyocd-gdbserver\" }, \"osx\" : { \"MIMode\" : \"gdb\" , \"MIDebuggerPath\" : \"arm-none-eabi-gdb\" , \"debugServerPath\" : \"pyocd-gdbserver\" }, \"windows\" : { \"preLaunchTask\" : \"make.exe\" , \"MIMode\" : \"gdb\" , \"MIDebuggerPath\" : \"arm-none-eabi-gdb.exe\" , \"debugServerPath\" : \"pyocd-gdbserver.exe\" , \"setupCommands\" : [ { \"text\" : \"-environment-cd ${workspaceRoot}\\\\armgcc\\\\_build\" }, { \"text\" : \"-target-select remote localhost:3333\" , \"description\" : \"connect to target\" , \"ignoreFailures\" : false }, { \"text\" : \"-file-exec-and-symbols nrf52840_xxaa.out\" , \"description\" : \"load file\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor endian little\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor reset\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor halt\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-interpreter-exec console \\\"monitor arm semihosting enable\\\"\" , \"ignoreFailures\" : false }, { \"text\" : \"-target-download\" , \"description\" : \"flash target\" , \"ignoreFailures\" : false } ] } } ] } Create a make task in .vscode/tasks.json file: { // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"make\" , \"options\" : { \"cwd\" : \"${workspaceRoot}/armgcc\" }, \"problemMatcher\" : { \"owner\" : \"cpp\" , \"fileLocation\" : [ \"relative\" , \"${workspaceRoot}\" ], \"pattern\" : { \"regexp\" : \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\" , \"file\" : 1 , \"line\" : 2 , \"column\" : 3 , \"severity\" : 4 , \"message\" : 5 } }, \"args\" : [], \"linux\" : { \"command\" : \"make\" }, \"osx\" : { \"command\" : \"make\" }, \"windows\" : { \"command\" : \"make.exe\" } } ] }","title":"Configuring the debugger"},{"location":"debugging/vscode/#connecting-the-target","text":"Mount the nRF52840 M.2 Module Connect the Debugger USB port of M.2 Dock to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer.","title":"Connecting the target"},{"location":"debugging/vscode/#debugging-your-project","text":"Click the menu Debug -> Start Debugging , and debugging starts. Click on the DEBUG CONSOLE tab to see the debug output: Now you can explore the debugging capabilities for Variables, Breakpoints and more.","title":"Debugging your project"},{"location":"debugging/vscode/#reference","text":"VS Code Launch Json Reference VS Code Tasks Documentation","title":"Reference"},{"location":"debugging/vscode/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"}]}